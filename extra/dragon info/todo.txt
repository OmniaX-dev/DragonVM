Text visualization for hardware interrupts (in call-tree view)
Inverted Colors in Text-Single-Color
show where interrupts are disabled (in call-tree view)
***Add possibility to specify instruction sets in machine config
Add possibility to specify required instruction sets in dasm

Add "Extended mov" instruction set
Remove old offset mov
Implelemnt Instructions:

    ## Offset on first operand
	omov *R1, 0xFAAB, 4				## Move word immediate into (deref reg + immediate offset word)
	omov *R1, 0xFAAB, R10			## Move word immediate into (deref reg + reg offset)
	omovb *R1, 0xFA, 4				## Move byte immediate into (deref reg + immediate offset word)
	omovb *R1, 0xFA, R10		    ## Move byte immediate into (deref reg + reg offset)
	omov *R1, *R2, 4				## Move word deref reg into (deref reg + immediate offset word)
	omov *R1, *R2, R10				## Move word deref reg into (deref reg + reg offset)
	omovb *R1, *R2, 4				## Move byte deref reg into (deref reg + immediate offset word)
	omovb *R1, *R2, R10				## Move byte deref reg into (deref reg + reg offset)
    
	omov R1, [0xFAAB], 4		    ## Move word Memory into (reg + immediate offset word)
	omov R1, [0xFAAB], R10			## Move word Memory into (reg + reg offset)
	omovb R1, [0xFAAB], 4			## Move byte Memory into (reg + immediate offset word)
	omovb R1, [0xFAAB], R10			## Move byte Memory into (reg + reg offset)
	omov R1, *R2, 4				    ## Move word deref reg into (reg + immediate offset word)
	omov R1, *R2, R10				## Move word deref reg into (reg + reg offset)
	omovb R1, *R2, 4				## Move byte deref reg into (reg + immediate offset word)
	omovb R1, *R2, R10				## Move byte deref reg into (reg + reg offset)
    
	omov [0x1800], 0xACAB, 4		## Move word immediate into (Memory + immediate offset word)
	omov [0x1800], 0xACAB, R10		## Move word immediate into (Memory + reg offset)
	omovb [0x1800], 0xAC, 4			## Move byte immediate into (Memory + immediate offset word)
	omovb [0x1800], 0xAC, R10		## Move byte immediate into (Memory + reg offset)
    
    
    ## Offset on second operand
	movo *R1, *R2, 4				## Move word (deref reg + immediate offset word) into deref reg
    movo *R1, *R2, R10				## Move word (deref reg + reg offset) into deref reg
	movbo *R1, *R2, 4				## Move byte (deref reg + immediate offset word) into deref reg
	movbo *R1, *R2, R10				## Move byte (deref reg + reg offset) into deref reg
    
	movo R1, [0xFAAB], 4		    ## Move word (Memory + immediate offset word) into reg
	movo R1, [0xFAAB], R10			## Move word (Memory + reg offset) into reg
	movbo R1, [0xFAAB], 4			## Move byte (Memory + immediate offset word) into reg
	movbo R1, [0xFAAB], R10			## Move byte (Memory + reg offset) into reg
	movo R1, *R2, 4				    ## Move word (deref reg + immediate offset word) into reg
	movo R1, *R2, R10				## Move word (deref reg + reg offset) into reg
	movbo R1, *R2, 4				## Move byte (deref reg + immediate offset word) into reg
	movbo R1, *R2, R10				## Move byte (deref reg + reg offset) into reg
    
	## Plus every (immediate offset) variant with byte offset instead of word offset